# -*- coding: utf-8 -*-
"""LISTO TP4 VALIDACION DE DATOS - TEMPLATE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qaLSG84kt93Q6065JzV0LQRPUtD-MU9S

*   **Año:** [2024]
*   **Alumno/a:** [GUADALUPE NOGUEIRA]
*   **Legajo:** [1203495]

# Pydantic
Pydantic es una libreria rapida y extensible que nos permite validar datos usando tipos de datos de Python.

Primero, importe `pydantic`.
"""

import pydantic

"""Supongamos que tenemos una lista de clientes (llamemoslo en el codigo `Client`). Los clientes tienen dos campos: DNI (un entero) y nacionalidad (un `string`). Cree el modelo base de `Client` (en forma de clases de Python)."""

from pydantic import BaseModel
class Client(BaseModel):
  dni: int
  nacionalidad: str

"""Cree a un usuario con documento 39.755.010 y nacionalidad 'Argentina'. Muestre todos sus campos."""

usuario = Client(dni=39755010, nacionalidad='Argentina')
print(usuario)

"""Intente crear al usuario con un documento en forma de `string`. Deberia fallar..."""

usuario = Client(dni='39755010', nacionalidad='Argentina')
print(usuario) #No falla sino que lo convierte

"""Hemos detectado que ciertos clientes tienen nacionalidades que no existen. Ademas, hay numeros de documento negativos y se tiene que poder agregar la fecha de registro de los clientes (que no pueden ser del futuro). Cambiar la definicion del cliente para que estas cosas no ocurran. Despues de la siguiente celda, cree otras 3 mas probando un caso donde deberia funcionar y otros dos en los que no."""

from datetime import date

class Client:
    NACIONALIDADES_VALIDAS = ["Argentina", "Chile", "Brasil", "Uruguay"]

    def __init__(self, dni: int, nacionalidad: str, fecha_registro: date):
        if dni < 0:
            raise ValueError("El DNI debe ser un número positivo.")
        self.dni = dni

        if nacionalidad not in Client.NACIONALIDADES_VALIDAS:
            raise ValueError(f"Nacionalidad '{nacionalidad}' no es válida. Debe ser una de {Client.NACIONALIDADES_VALIDAS}.")
        self.nacionalidad = nacionalidad

        if fecha_registro > date.today():
            raise ValueError("La fecha de registro no puede ser una fecha futura.")
        self.fecha_registro = fecha_registro

    def __repr__(self):
        return f"Client(DNI={self.dni}, Nacionalidad='{self.nacionalidad}', Fecha de Registro={self.fecha_registro})"

#VALIDO
from datetime import date

cliente1 = Client(39755010, "Argentina", date(2023, 11, 14))
print(cliente1)

#INVALIDO
from datetime import date

cliente2 = Client(-39755010, "Argentina", date(2023, 11, 14))
print(cliente2)

#invalido
from datetime import date

cliente3 = Client(39755010, "Peru", date(2023, 11, 14))
print(cliente3)

"""# Pandera
Hacer lo que se pidio en la ultima celda anterior, pero con Pandera.
"""

!pip install --upgrade pandera

from datetime import date
import pandera as pa
import pandas as pd

# Clase Client sin validaciones internas
class Client:
    def __init__(self, dni: int, nacionalidad: str, fecha_registro: date):
        self.dni = dni
        self.nacionalidad = nacionalidad
        self.fecha_registro = fecha_registro

    def __repr__(self):
        return f"Client(DNI={self.dni}, Nacionalidad='{self.nacionalidad}', Fecha de Registro={self.fecha_registro})"


# Definición del esquema de validación con pa.DataFrameSchema
client_schema = pa.DataFrameSchema({
    "dni": pa.Column(int, checks=pa.Check.ge(0)),  # DNI positivo
    "nacionalidad": pa.Column(str, checks=pa.Check.isin(["Argentina", "Chile", "Brasil", "Uruguay", "Paraguay"])),
    "fecha_registro": pa.Column(date, checks=pa.Check.le(date.today()))  # Fecha no futura
})


# Función para validar un cliente usando Pandera
def validate_client(client):
    # Crear un DataFrame de una sola fila para el cliente
    df_client = pd.DataFrame([{
        "dni": client.dni,
        "nacionalidad": client.nacionalidad,
        "fecha_registro": client.fecha_registro
    }])

    # Validar el DataFrame contra el esquema
    try:
        client_schema.validate(df_client)
        print("Cliente válido:", client)
    except pa.errors.SchemaError as e:
        print("Error de validación:", e)

#Valido
cliente1 = Client(39755010, "Argentina", date(2023, 11, 14))
validate_client(cliente1)

#INVALIDO
cliente2 = Client(-39755010, "Argentina", date(2023, 11, 14))
validate_client(cliente2)
#

#Invalido
cliente3 = Client(39755010, "Argentina", date(2029, 11, 14))
validate_client(cliente3)