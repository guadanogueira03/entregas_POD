# -*- coding: utf-8 -*-
"""LISTO TP2 NUMPY

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19pkNxKAEAC0-Xuf_XxW-3l2k3VUcirUG

*   **Año:** 2024
*   **Alumno/a:** Guadalupe Nogueira
*   **Legajo:** 1203495

# NumPy
A continuación, cada celda va a pedir algo distinto. Por favor, realizarlo con la menor cantidad de lineas posibles y con NumPy.

Importar `numpy` con el alias `np` e imprimir la versión instalada.
"""

import numpy as np
print(np.__version__)

"""Setear el "seed" de la librearia en 0."""

np.random.seed(0)

"""Crear un vector vacio (en ingles, *empty*) para subir 100 imagenes de 100x600 pixeles. Imprimir el shape de dicho vector."""

vector = np.empty((100,100,600))
print(vector.shape)

"""Crear dos vectores vacios donde uno tiene 1,000 elementos y el otro tiene 100,000 elementos. Imprimir el tamaño ocupado en memoria de cada arreglo en bytes."""

vector1 = np.empty(1_000)
vector2 =np.empty(100_000)
print(vector1.nbytes)
print(vector2.nbytes)

"""Crear un vector vacío con 10 elementos. El quinto elemento tiene que ser igual a 1. Imprimir el vector."""

vector3 = np.empty(10)


vector3[4] = 1

print(vector3)

"""Generar un arreglo con los valores desde 10 hasta 35 en pasos de 2. Imprimir el arreglo."""

array = np.arange(10,35,2)
array

"""Generar un arreglo con los valores desde -1 hasta -1 en pasos de 0.25. Luego, revertirlo. Imprimir el arreglo."""

array1 = np.arange(-1,1,(0.25))
print(array1)

print(array1[::-1])

"""Generar un arreglo que va desde -10 y 10 y que tenga 2,878 elementos. Imprimir el primer, último y 198º elemento."""

array2 = np.linspace(-10,10,2878)
print(array2[0])
print(array2[-1])
print(array2[197])

"""Generar una matriz 5x5 y con valores de 0 a 24. Imprimir la matriz."""

matriz = np.linspace(0,24,25).reshape(5,5)
matriz

"""Generar una lista de 10,000 elementos que vengan de una distribucion uniforme entre la constante de euler y π. (Nota: utilizar constantes de `numpy`). Dibujar la distribución con `matplotlib` en forma de histograma e imprimir el tipo de dato del arreglo."""

import matplotlib.pyplot as plt
e = np.e
pi = np.pi

lista = np.random.uniform(e,pi,10_000)

histo = plt.hist(lista,edgecolor ="black")
print(plt.show())
print(lista.dtype)

"""Generar una lista de 20 elementos que vengan de una distribucion uniforme entre 0 y 1 e imprimirlo ordenado."""

lista1 = np.random.uniform(0,1,20)
lista1.sort()
lista1

"""Lo mismo que el punto anterior pero con una distribución normal con media 160 y desvío estandar 30."""

lista2 = np.random.normal(160,30,20)
lista2.sort()
lista2

"""Lo mismo que el punto anterior pero con una distribución normal con media 50 y desvío estandar 1. Imprimir el valor mas cercano (es decir, el de menor distancia) a 20 de los números generados."""

lista3 = np.random.normal(50,1,20)
lista3.sort()

print(lista3.flat[np.abs(lista3 - 20).argmin()])

"""Teniendo en cuenta la declaración de la siguiente variable, imprimir la suma, la media, el máximo, y el mínimo de sus elementos."""

arreglo_dummy = np.array([1,9,10,23,45,78,94,78,10,23,65,47])

suma = np.sum(arreglo_dummy)
media = np.mean(arreglo_dummy)
maximo = np.max(arreglo_dummy)
minimo = np.min(arreglo_dummy)

print(suma)
print(media)
print(maximo)
print(minimo)

"""Hacer lo mismo que el punto anterior pero... con un arreglo particular. Imprimir el resultado y encontrarle una explicación."""

arreglo_weird = np.array([1,9,10,23,45,78,94,np.nan,10,23,65,47])

arreglo_weird = np.array([1,9,10,23,45,78,94,np.nan,10,23,65,47])
suma = np.sum(arreglo_weird)
media = np.mean(arreglo_weird)
maximo = np.max(arreglo_weird)
minimo = np.min(arreglo_weird)

print(suma)
print(media)
print(maximo)
print(minimo)

#La funcion imprime "nan" ya que las funciones suma, emdia, min y max realizan operaciones numericas, pero en este caso encuentra un "no numero" en el arreglo, por lo tanto no puede imprimir el resultado numerico esperado

"""Generar un conjunto de 100 numeros ***enteros*** entre 0 y 10. Imprimir la cantidad de numeros pares que se generaron e imprimir el tipo de dato del arreglo."""

lista4 = np.random.randint(0,11,100)
print(lista4)
print(np.count_nonzero(lista4%2==0))

"""Generar un conjunto de 100 numeros enteros entre 0 y 10. Imprimir la cantidad de numeros mayores a 4 que se generaron."""

lista5 = np.random.randint(0,11,100)
print(lista5)
print(np.count_nonzero(lista5 > 4))

"""Generar un conjunto de 100 numeros enteros entre 0 y 10. Imprimir la cantidad de numeros mayores a 6 e impares que se generaron."""

lista6 = np.random.randint(1,11,100)
print(lista6)
print(np.count_nonzero((lista6 > 6 ) & (lista6 %2 == 1)))

"""Supongamos que hay elecciones nacionales en un país y la cantidad de votos fueron los siguientes:


|Candidato 1|Cantidato 2|Cantidato 3|
|--|--|--|
|1,772,322  |1,102,669|2,100,978 |

Con `numpy`, calcular el porcentaje correspondiente a cada candidato y redondear a 2 dígitos. Imprimir los porcentajes finales y el numero del candidato ganador (aunque sea obvio, responder con lógica de `numpy`).
"""

can1 = 1772322
can2 = 1102669
can3 = 2100978
candidatos = [can1,can2,can3]
suma = np.sum(candidatos)
pro1 = round(((can1*100)/suma),2)
pro2 = round(((can2*100)/suma),2)
pro3 = round(((can3*100)/suma),2)

print(pro1)
print(pro2)
print(pro3)
print(np.max(candidatos))

"""Generar un arreglo de 1,000 numeros de una distribución uniforme entre 0 y 1. Luego, generar otro arreglo que contenga todos los numeros del primer arreglo que son mayores a 0.7. Imprimir la media del "sub" arreglo."""

lista8 = np.random.uniform(0,1,1000)

lista9 = lista8[lista8 < 0.7]

print(lista9)

"""# Operación vectorizada vs. Operación loopeada
`numpy` no es solo poderoso por la gama de operaciones que podemos hacer en pocas lineas de código. Sino que por su eficiencia.

Supongamos que tenemos la función $f(x)=10*(x^2/e^x)$. Evaluar la función (en celdas apartes) entre -1 y 1 con 100,000 valores (i) con y (ii) sin un loop `for`. Medir tiempos de cada celda y sacar conclusiones.
"""

import time
valores1 = np.linspace(-1,1,100_000)

def funcion(x):
  res = 10*(x**2/np.exp(x))
  return res
comienzo = time.time()
for elem in valores1:
  funcion(elem)

terminar = time.time()
resultadoFor = terminar - comienzo
print(resultadoFor)

import time
valores2 = np.linspace(-1,1,100_000)

comienzo = time.time()
funcion(valores2)

terminar = time.time()
resultado1 = terminar - comienzo
print(resultado1)

"""Realizarlo sin un bucle for, tiene un procesamiento mucho mas rapido

El resultado de la celda anterior (aprovechar lo obtenido), graficarlo como gráfico de lineas.
"""

axisX = valores2
axisY = np.sin(axisX)

plt.plot(axisX, axisY)

plt.show

"""# Análisis de imagenes

Matematicamente hablando, las imagenes son arreglos. Si una imagen es de blanco y negro, tenemos una imagen de un canal y puede ser interpretado como una simple matriz (`.shape=2`). Si tiene varios canales, tenemos una matriz asignada para cada canal (`.shape=3`).

[Lenna](https://en.wikipedia.org/wiki/Lenna) es una imagen ampliamente utilizada en ciencias de la computación. Se volvió un icono. La idea va a ser analizar a la imagen y tratarla para varios propositos. Corra la siguiente celda para descargar la imagen y guardala como arreglo `numpy` en la variable `image`. Utilizar esta variable en las siguientes celdas.
"""

!wget https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png
from PIL import Image
image = Image.open('Lenna_(test_image).png')
image = np.asarray(image)

"""Arranquemos con mostrar la imagen. Para eso, utilice `matplotlib.pyplot`."""

import matplotlib.pyplot as plt
plt.imshow(image)

"""¿Cual es la dimensión de la imagen y que ancho y alto tiene?"""

print(image.shape)

"""Recorte la imagen en ancho entre (tomando como referencia los ejes de la imagen vista anteriormente) los 100 y 350 pixeles y en alto entre 200 y 400 pixeles. Mostrar el resultado."""

recorte = image[200:400, 100:350]
plt.imshow(recorte)

"""Muestre cada uno de los canales de la imagen."""

lena_red=np.copy(image)
lena_red[:,:,1]=0
lena_red[:,:,2]=0
plt.title("Lena canal rojo")
plt.imshow(lena_red)

lena_blue=np.copy(image)
lena_blue[:,:,0]=0
lena_blue[:,:,1]=0
plt.title("Lena canal azul")
plt.imshow(lena_blue)

lena_green=np.copy(image)
lena_green[:,:,0]=0
lena_green[:,:,2]=0
plt.title("Lena canal verde")
plt.imshow(lena_green)

"""Calcule el minimo, el máximo, y el promedio de los valores de la imagen."""

minimo = np.min(image)
maximo = np.max(image)
pro = np.mean(image)

print(minimo,maximo,pro)

"""La verdad que tener todos los colores de la imagen es muy redundante. Paselo a blanco y negro. Para ello, tome el promedio de los canales en cada pixel. Muestre la imagen en blanco y negro."""

h,w,c=image.shape

lena_gris=np.zeros((h,w))

for i in range(h):
    for j in range(w):
        promedio = np.mean(image[i, j, :])
        lena_gris[i, j] = promedio

plt.imshow(lena_gris, cmap = "gray")
plt.title('Imagen en Escala de Grises')
plt.show()
print(h)

# np.mean(a,axis = 1)

"""Por último, vamos a proceder a "binarizar" la imagen. Es decir, vamos a setear en 1 TODOS los pixeles donde la intensidad (es decir, el valor del pixel) sea mayor a 200. El resto, lo seteamos a 0. Mostrar el resultado."""

binario = (lena_gris > 200).astype(int)
plt.imshow(binario, cmap = "gray")

"""# Análisis de datos

`boston.csv` es un archivo csv ampliamente utilizado como 'juguete' en proyectos de Machine Learning. Para descargarlo, corra la siguiente celda.
"""

!wget https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/MASS/Boston.csv

"""Lea el archivo csv (sin `pandas` pero se puede usar `csv`) y quedese con todas las columnas que son numericas. Inspeccionarlo puede hacer el trabajo bastante facil.

Nota: Aunque `numpy` tenga una libreria para leer archivos, en este caso no no es útil por que todas las columas constan de diferentes tipo de dato y ademas el encabezado es `string`.
"""

import csv
with open('Boston.csv', newline='') as csvfile:
  reader = csv.reader(csvfile)

"""Una vez procesado el archivo csv, proceda a convertirlo en una matriz de `numpy`."""

import csv
with open("Boston.csv", newline = "") as csvfile:
  file_read = csv.reader(csvfile)
  lista = list(file_read)

matriz = np.array(lista)
matriz

"""Reporte el promedio de todas las columnas."""

#Escribir el codigo para responder la pregunta en esta celda
for i in range(0,len(matriz[0])):
  columna = matriz[1:,i]
  columna = columna.astype(float)

  promedio = np.mean(columna)
  print(promedio)

"""Reporte la división entre una columna y otra (a elección cuales)"""

#Escribir el codigo para responder la pregunta en esta celda
columna2 = matriz[1:,2]
columna2 = columna2.astype(float)

columna3 = matriz[1:,3]
columna3 = columna3.astype(float)

suma2 = np.sum(columna2)
suma3 = np.sum(columna3)
res = suma2 / suma3
print(res)